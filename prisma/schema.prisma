// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Category {
  id       Int                @id @default(autoincrement())
  serial   Int?
  name     String
  slug     String
  parentId Int?
  parent   Category?          @relation("ParentChilds", fields: [parentId], references: [id])
  childs   Category[]         @relation("ParentChilds")
  posts    CategoriesOnPost[]
}

model CategoriesOnPost {
  post       Post     @relation(fields: [postId], references: [id])
  postId     Int // relation scalar field (used in the `@relation` attribute above)
  category   Category @relation(fields: [categoryId], references: [id])
  categoryId Int // relation scalar field (used in the `@relation` attribute above)

  @@id([postId, categoryId])
}

model TagsOnPost {
  post   Post @relation(fields: [postId], references: [id])
  postId Int // relation scalar field (used in the `@relation` attribute above)
  tag    Tag  @relation(fields: [tagId], references: [id])
  tagId  Int // relation scalar field (used in the `@relation` attribute above)

  @@id([postId, tagId])
}

model Tag {
  id    Int          @id @default(autoincrement())
  name  String
  posts TagsOnPost[]
}

model Post {
  id              Int                @id @default(autoincrement())
  title           String
  description     String
  viewed          Int                @default(0)
  metaDescription String
  image           String?
  slug            String
  tags            TagsOnPost[]
  type            String?
  createdAt       DateTime           @default(now()) @map(name: "created_at")
  updatedAt       DateTime           @updatedAt @map(name: "updated_at")
  categories      CategoriesOnPost[]
  comments        PostComment[]
}

model User {
  id        Int      @id @default(autoincrement())
  userName  String
  email     String
  createdAt DateTime @default(now()) @map(name: "created_at")
  updatedAt DateTime @updatedAt @map(name: "updated_at")
}

model PostComment {
  id        Int           @id @default(autoincrement())
  comment   String
  image String?
  postId    Int
  product   Post?         @relation(fields: [postId], references: [id])
  parentId  Int?
  parent    PostComment?  @relation("ParentChilds", fields: [parentId], references: [id])
  childs    PostComment[] @relation("ParentChilds")
  createdAt DateTime      @default(now()) @map(name: "created_at")
  updatedAt DateTime      @updatedAt @map(name: "updated_at")
}
